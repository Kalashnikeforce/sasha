// Define showTab function FIRST and make it globally available
function showTab(tabId, event) {
    console.log('Switching to tab:', tabId);

    // Hide all content
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.style.display = 'none';
        tab.classList.remove('active');
    });

    // Show selected content
    const selectedTab = document.getElementById(tabId);
    if (selectedTab) {
        selectedTab.style.display = 'block';
        selectedTab.classList.add('active');
    }

    // Update button states
    document.querySelectorAll('.tab-btn').forEach(btn => {
        if (btn) {
            btn.classList.remove('active');
        }
    });

    if (event && event.target) {
        event.target.classList.add('active');
    } else {
        const activeBtn = document.querySelector(`[onclick*="${tabId}"]`);
        if (activeBtn) {
            activeBtn.classList.add('active');
        }
    }

    // Load content based on tab
    switch(tabId) {
        case 'giveaways-tab':
            loadGiveaways();
            break;
        case 'tournaments-tab':
            loadTournaments();
            break;
        case 'admin-tab':
            if (isAdmin) {
                showAdminPanel();
            }
            break;
    }
}

// Make function globally available immediately
window.showTab = showTab;

// Global variables
let currentUser = null;
let isAdmin = false;
let currentGiveawayId = null;
let currentTournamentId = null;

// Initialize Telegram WebApp
if (window.Telegram && window.Telegram.WebApp) {
    window.Telegram.WebApp.ready();
    window.Telegram.WebApp.expand();

    const tgVersion = window.Telegram.WebApp.version || '6.0';
    const majorVersion = parseFloat(tgVersion);

    if (majorVersion >= 6.1) {
        try {
            if (window.Telegram.WebApp.setHeaderColor) {
                window.Telegram.WebApp.setHeaderColor('#0a0a0f');
            }
            if (window.Telegram.WebApp.setBackgroundColor) {
                window.Telegram.WebApp.setBackgroundColor('#0a0a0f');
            }
        } catch (e) {
            console.log('Color methods not available:', e.message);
        }
    } else {
        document.documentElement.style.setProperty('--tg-theme-bg-color', '#0a0a0f');
        document.documentElement.style.setProperty('--tg-theme-secondary-bg-color', '#1a1a2e');
    }

    currentUser = window.Telegram.WebApp.initDataUnsafe?.user;
}

// Initialize app
async function initializeApp() {
    console.log('üîß Initializing app...');

    if (currentUser) {
        console.log('üë§ User:', currentUser);
        await checkAdminStatus(currentUser.id);
        await checkSubscription(currentUser.id);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
    const urlParams = new URLSearchParams(window.location.search);
    const tournamentId = urlParams.get('tournament');

    if (tournamentId) {
        console.log('üèÜ Tournament ID found:', tournamentId);
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        showTab('tournaments-tab');
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —Ç—É—Ä–Ω–∏—Ä—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
        setTimeout(() => {
            showTournamentRegistration(parseInt(tournamentId));
        }, 1000);
    } else {
        // Show default tab
        showTab('giveaways-tab');
    }

    console.log('‚úÖ App initialized');
}

// Check if user is admin
async function checkAdminStatus(userId) {
    try {
        console.log('üîç Checking admin status for user:', userId);

        const response = await fetch('/api/check-admin', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: userId })
        });
        const data = await response.json();
        isAdmin = data.is_admin;

        console.log('üîß Admin check result:', { userId, isAdmin, data });

        if (isAdmin) {
            const adminBtn = document.getElementById('admin-btn');
            const adminTab = document.getElementById('admin-tab');

            if (adminBtn) {
                adminBtn.style.display = 'block';
                console.log('‚úÖ Admin button activated for user:', userId);
            }

            if (adminTab) {
                adminTab.style.display = 'block';
                console.log('‚úÖ Admin tab activated for user:', userId);
            }
        } else {
            console.log('‚ùå User is not admin:', userId);
        }
    } catch (error) {
        console.error('‚ùå Error checking admin status:', error);

        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤ PREVIEW —Ä–µ–∂–∏–º–µ - –¥–∞–µ–º –∞–¥–º–∏–Ω–∫—É –≤—Å–µ–º
        if (window.location.hostname.includes('repl.co') || window.location.hostname.includes('replit')) {
            console.log('üîß PREVIEW MODE: Granting admin access due to environment');
            isAdmin = true;
            const adminBtn = document.getElementById('admin-btn');
            const adminTab = document.getElementById('admin-tab');

            if (adminBtn) adminBtn.style.display = 'block';
            if (adminTab) adminTab.style.display = 'block';
        }
    }
}

// Check subscription status
async function checkSubscription(userId) {
    try {
        const response = await fetch('/api/check-subscription', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: userId })
        });
        const data = await response.json();
        return data.is_subscribed;
    } catch (error) {
        console.error('Error checking subscription:', error);
        return false;
    }
}

// Load giveaways
async function loadGiveaways() {
    try {
        const response = await fetch('/api/giveaways');

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const giveaways = await response.json();

        if (!Array.isArray(giveaways)) {
            throw new Error('Invalid giveaways data format');
        }

        const container = document.getElementById('giveaways-list');
        if (!container) {
            console.error('Giveaways container not found');
            return;
        }

        container.innerHTML = '';

        if (giveaways.length === 0) {
            container.innerHTML = '<div class="empty-state">üéÅ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π</div>';
            return;
        }

        giveaways.forEach(giveaway => {
            const giveawayEl = document.createElement('div');
            giveawayEl.className = 'giveaway-card';

            // –£–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" –∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –∫–∞–∫ –ø—Ä–æ—Å–∏–ª–∏
            const adminControls = isAdmin ? `
                <div class="admin-controls">
                    <button onclick="deleteGiveaway(${giveaway.id})" class="admin-btn-small delete">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                    <button onclick="drawWinners(${giveaway.id})" class="admin-btn-small">üé≤ –†–∞–∑—ã–≥—Ä–∞—Ç—å</button>
                </div>
            ` : '';

            giveawayEl.innerHTML = `
                <h3>${giveaway.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                <p>${giveaway.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                <div class="giveaway-info">
                    <span>üë• ${giveaway.participants || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                    <span>üèÜ ${giveaway.winners_count || 1} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π</span>
                    <span>üìÖ ${giveaway.end_date ? new Date(giveaway.end_date).toLocaleDateString() : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                </div>
                <button onclick="participateGiveaway(${giveaway.id})" class="participate-btn">
                    üéÆ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
                </button>
                ${adminControls}
            `;
            container.appendChild(giveawayEl);
        });
    } catch (error) {
        console.error('Error loading giveaways:', error);
        const container = document.getElementById('giveaways-list');
        if (container) {
            container.innerHTML = '<div class="empty-state">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π</div>';
        }
    }
}

// Participate in giveaway
async function participateGiveaway(giveawayId) {
    if (!currentUser) {
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const isSubscribed = await checkSubscription(currentUser.id);
    if (!isSubscribed) {
        alert('–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!');
        return;
    }

    try {
        const response = await fetch(`/api/giveaways/${giveawayId}/participate`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: currentUser.id })
        });

        const result = await response.json();
        if (result.success) {
            alert('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!');
            loadGiveaways();
        } else {
            alert('‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ');
        }
    } catch (error) {
        console.error('Error participating:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ');
    }
}

// Load tournaments
async function loadTournaments() {
    try {
        const response = await fetch('/api/tournaments');

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const tournaments = await response.json();

        if (!Array.isArray(tournaments)) {
            throw new Error('Invalid tournaments data format');
        }

        const container = document.getElementById('tournaments-list');
        if (!container) {
            console.error('Tournaments container not found');
            return;
        }

        container.innerHTML = '';

        if (tournaments.length === 0) {
            container.innerHTML = '<div class="empty-state">üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤</div>';
            return;
        }

        tournaments.forEach(tournament => {
            const tournamentEl = document.createElement('div');
            tournamentEl.className = 'tournament-card';
            tournamentEl.setAttribute('data-tournament-id', tournament.id);

            const adminControls = isAdmin ? `
                <div class="admin-controls">
                    <button onclick="deleteTournament(${tournament.id})" class="admin-btn-small delete">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            ` : '';

            tournamentEl.innerHTML = `
                <h3>${tournament.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                <p>${tournament.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                <div class="tournament-info">
                    <span>üë• ${tournament.participants || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                    <span>üèÜ ${tournament.winners_count || 1} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π</span>
                    <span>üìÖ ${tournament.start_date ? new Date(tournament.start_date).toLocaleDateString() : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                </div>
                <button onclick="showTournamentRegistration(${tournament.id})" class="register-btn">
                    üèÜ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
                </button>
                ${adminControls}
            `;
            container.appendChild(tournamentEl);
        });
    } catch (error) {
        console.error('Error loading tournaments:', error);
        const container = document.getElementById('tournaments-list');
        if (container) {
            container.innerHTML = '<div class="empty-state">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤</div>';
        }
    }
}



// Show tournament registration form
async function showTournamentRegistration(tournamentId) {
    console.log(`üèÜ Attempting to show registration for tournament ${tournamentId}`);

    if (!currentUser) {
        alert('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const isSubscribed = await checkSubscription(currentUser.id);
    if (!isSubscribed) {
        alert('‚ùå –î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!');
        return;
    }

    // Fetch tournament details to check registration status
    try {
        const response = await fetch(`/api/tournaments/${tournamentId}`);
        const tournament = await response.json();

        if (tournament && tournament.registration_open === false) {
            alert('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä –∑–∞–∫—Ä—ã—Ç–∞!');
            return;
        }
    } catch (error) {
        console.error('Error fetching tournament details:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ');
        return;
    }

    currentTournamentId = tournamentId;
    const modal = document.getElementById('tournament-registration');
    if (modal) {
        modal.style.display = 'block';
        // Clear form
        const form = modal.querySelector('form');
        if (form) form.reset();
    } else {
        console.error('Tournament registration modal not found');
    }
}

// Register for tournament
async function registerTournament() {
    if (!currentUser || !currentTournamentId) return;

    const isSubscribed = await checkSubscription(currentUser.id);
    if (!isSubscribed) {
        alert('–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!');
        return;
    }

    const formData = {
        user_id: currentUser.id,
        age: document.getElementById('age').value,
        phone_brand: document.getElementById('phone-brand').value,
        nickname: document.getElementById('nickname').value,
        game_id: document.getElementById('game-id').value
    };

    try {
        const response = await fetch(`/api/tournaments/${currentTournamentId}/register`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });

        const result = await response.json();
        if (result.success) {
            alert('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç—É—Ä–Ω–∏—Ä!');
            document.getElementById('tournament-registration').style.display = 'none';
            loadTournaments();
        } else {
            alert('‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä');
        }
    } catch (error) {
        console.error('Error registering for tournament:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä');
    }
}

// Show admin panel
function showAdminPanel() {
    if (!isAdmin) return;

    document.getElementById('admin-content').innerHTML = `
        <div class="admin-panel">
            <h2>üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
            <div class="admin-grid">
                <div class="admin-card" onclick="showCreateGiveaway()">
                    <div class="admin-card-icon">üéÅ</div>
                    <h3>–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à</h3>
                    <p>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø—Ä–∏–∑–æ–≤</p>
                </div>
                <div class="admin-card" onclick="showCreateTournament()">
                    <div class="admin-card-icon">üèÜ</div>
                    <h3>–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä</h3>
                    <p>–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç</p>
                </div>
                <div class="admin-card" onclick="showTournamentParticipantsSelector()">
                    <div class="admin-card-icon">üë•</div>
                    <h3>–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤</h3>
                    <p>–ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞</p>
                </div>
                <div class="admin-card" onclick="loadAdminStats()">
                    <div class="admin-card-icon">üìä</div>
                    <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <p>–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
                </div>
            </div>
        </div>
    `;
}

// Show create giveaway form
function showCreateGiveaway() {
    document.getElementById('admin-content').innerHTML = `
        <div class="create-form">
            <h2>üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à</h2>
            <div class="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞</label>
                <input type="text" id="giveaway-title" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" />
            </div>
            <div class="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea id="giveaway-description" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞" rows="4"></textarea>
            </div>
            <div class="form-group">
                <label>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
                <input type="datetime-local" id="giveaway-end-date" />
            </div>
            <div class="form-group">
                <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π</label>
                <input type="number" id="giveaway-winners" placeholder="1" min="1" max="10" value="1" onchange="updatePrizePlaces('giveaway')" />
            </div>
            <div id="giveaway-prizes" class="prizes-section">
                <div class="form-group">
                    <label>ü•á –ü—Ä–∏–∑ –∑–∞ 1 –º–µ—Å—Ç–æ</label>
                    <input type="text" id="prize-1" placeholder="–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—å" />
                </div>
            </div>
            <div class="form-buttons">
                <button onclick="createGiveaway()" class="create-btn">–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à</button>
                <button onclick="showAdminPanel()" class="cancel-btn">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
}

// Create giveaway
async function createGiveaway() {
    const title = document.getElementById('giveaway-title').value;
    const description = document.getElementById('giveaway-description').value;
    const endDate = document.getElementById('giveaway-end-date').value;
    const winnersCount = parseInt(document.getElementById('giveaway-winners').value) || 1;

    if (!title || !description || !endDate) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑—ã
    const prizes = [];
    for (let i = 1; i <= winnersCount; i++) {
        const prizeInput = document.getElementById(`prize-${i}`);
        if (prizeInput && prizeInput.value.trim()) {
            prizes.push(prizeInput.value.trim());
        }
    }

    try {
        const response = await fetch('/api/giveaways', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                title,
                description,
                end_date: endDate,
                winners_count: winnersCount,
                prizes: prizes
            })
        });

        const result = await response.json();
        if (result.success) {
            alert('–†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
            showAdminPanel();
            loadGiveaways();
        } else {
            alert('–û—à–∏–±–∫–∞: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    } catch (error) {
        console.error('Error creating giveaway:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
    }
}

// Show create tournament form
function showCreateTournament() {
    document.getElementById('admin-content').innerHTML = `
        <div class="create-form">
            <h2>üèÜ –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä</h2>
            <div class="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞</label>
                <input type="text" id="tournament-title" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" />
            </div>
            <div class="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea id="tournament-description" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞" rows="4"></textarea>
            </div>
            <div class="form-group">
                <label>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</label>
                <input type="datetime-local" id="tournament-start-date" />
            </div>
            <div class="form-group">
                <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π</label>
                <input type="number" id="tournament-winners" placeholder="1" min="1" max="10" value="1" onchange="updatePrizePlaces('tournament')" />
            </div>
            <div id="tournament-prizes" class="prizes-section">
                <div class="form-group">
                    <label>ü•á –ü—Ä–∏–∑ –∑–∞ 1 –º–µ—Å—Ç–æ</label>
                    <input type="text" id="tournament-prize-1" placeholder="–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—å" />
                </div>
            </div>
             <div class="form-group">
                <label>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞</label>
                <select id="tournament-registration-status">
                    <option value="open">–î–∞</option>
                    <option value="closed">–ù–µ—Ç</option>
                </select>
            </div>
            <div class="form-buttons">
                <button onclick="createTournament()" class="create-btn">–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä</button>
                <button onclick="showAdminPanel()" class="cancel-btn">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
}

// Create tournament
async function createTournament() {
    const title = document.getElementById('tournament-title').value;
    const description = document.getElementById('tournament-description').value;
    const startDate = document.getElementById('tournament-start-date').value;
    const winnersCount = parseInt(document.getElementById('tournament-winners').value) || 1;
    const registrationStatus = document.getElementById('tournament-registration-status').value; // Get registration status

    if (!title || !description || !startDate) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑—ã
    const prizes = [];
    for (let i = 1; i <= winnersCount; i++) {
        const prizeInput = document.getElementById(`tournament-prize-${i}`);
        if (prizeInput && prizeInput.value.trim()) {
            prizes.push(prizeInput.value.trim());
        }
    }

    const data = {
        title,
        description,
        start_date: startDate,
        winners_count: winnersCount,
        prizes: prizes,
        registration_open: registrationStatus === 'open' // Include registration status in data
    };

    try {
        const response = await fetch('/api/tournaments', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        if (result.success) {
            alert('‚úÖ –¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!');
            showAdminPanel();
            loadTournaments();
        } else {
            alert('–û—à–∏–±–∫–∞: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    } catch (error) {
        console.error('Error creating tournament:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞');
    }
}

// Cancel tournament registration
function cancelTournamentRegistration() {
    const modal = document.getElementById('tournament-registration');
    if (modal) {
        modal.style.display = 'none';
        currentTournamentId = null;
    }
}

// Admin functions for giveaway management
async function deleteGiveaway(giveawayId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) return;

    try {
        const response = await fetch(`/api/giveaways/${giveawayId}`, {
            method: 'DELETE'
        });

        const result = await response.json();
        if (result.success) {
            alert('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É–¥–∞–ª–µ–Ω!');
            loadGiveaways();
        }
    } catch (error) {
        console.error('Error deleting giveaway:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
    }
}

async function drawWinners(giveawayId) {
    if (!confirm('üé≤ –ü—Ä–æ–≤–µ—Å—Ç–∏ —á–µ—Å—Ç–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π?\n\n‚ö†Ô∏è –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!')) return;

    try {
        const response = await fetch(`/api/giveaways/${giveawayId}/draw`, {
            method: 'POST'
        });

        const result = await response.json();

        if (result.success) {
            if (result.winner) {
                alert(`üéâ ${result.message}\n\nüë§ ${result.winner.name} (@${result.winner.username || '–±–µ–∑ username'})\n\n‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω!\nüì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!`);
            } else if (result.winners) {
                let winnersText = result.winners.map((winner, index) => 
                    `${index + 1}. ${winner.name} (@${winner.username || '–±–µ–∑ username'})`
                ).join('\n');

                alert(`üéâ ${result.message}\n\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n${winnersText}\n\n‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω!\nüì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!`);
            }

            await loadGiveaways();
        } else {
            alert('‚ùå ' + (result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞'));
        }
    } catch (error) {
        console.error('Error drawing winner:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
    }
}



async function viewTournamentParticipants(tournamentId) {
    console.log(`üë• Loading participants for tournament ${tournamentId}`);

    if (!isAdmin) {
        alert('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
        return;
    }

    try {
        const response = await fetch(`/api/tournaments/${tournamentId}/participants`);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const participants = await response.json();
        console.log(`üìä Loaded ${participants.length} participants:`, participants);

        if (!Array.isArray(participants)) {
            alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
            return;
        }

        if (participants.length === 0) {
            alert('üìù –ù–∞ —Ç—É—Ä–Ω–∏—Ä –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è');
            return;
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        document.getElementById('admin-content').innerHTML = `
            <div class="participants-view">
                <div class="participants-header">
                    <h2>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞</h2>
                    <button onclick="showAdminPanel()" class="back-btn">‚Üê –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</button>
                </div>
                <div class="participants-stats">
                    <div class="stat-card">
                        <div class="stat-number">${participants.length}</div>
                        <div class="stat-label">–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>
                    </div>
                </div>
                <div class="participants-list">
                    ${participants.map((participant, index) => `
                        <div class="participant-card">
                            <div class="participant-number">${index + 1}</div>
                            <div class="participant-info">
                                <div class="participant-name">${participant.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</div>
                                <div class="participant-details">
                                    <span>üéÆ ${participant.nickname || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                                    <span>üÜî ${participant.game_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                                    <span>üì± ${participant.phone_brand || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                                    <span>üéÇ ${participant.age || '–ù–µ —É–∫–∞–∑–∞–Ω'} –ª–µ—Ç</span>
                                    ${participant.username ? `<span>üë§ @${participant.username}</span>` : ''}
                                </div>
                                <div class="participant-date">
                                    üìÖ ${participant.registration_date ? new Date(participant.registration_date).toLocaleDateString('ru-RU') : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
                <div class="participants-actions">
                    <button onclick="exportParticipants(${tournamentId})" class="export-btn">üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫</button>
                    <button onclick="announceWinners(${tournamentId})" class="announce-btn">üèÜ –û–±—ä—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π</button>
                </div>
            </div>
        `;

    } catch (error) {
        console.error('Error loading participants:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
async function announceWinners(tournamentId) {
    const winnersText = prompt('üèÜ –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\nü•á 1 –º–µ—Å—Ç–æ: –ù–∏–∫–Ω–µ–π–º1\nü•à 2 –º–µ—Å—Ç–æ: –ù–∏–∫–Ω–µ–π–º2\nü•â 3 –º–µ—Å—Ç–æ: –ù–∏–∫–Ω–µ–π–º3');

    if (!winnersText || !winnersText.trim()) {
        alert('‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        return;
    }

    try {
        const response = await fetch(`/api/tournaments/${tournamentId}/announce-winners`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ winners: winnersText.trim() })
        });

        const result = await response.json();
        if (result.success) {
            alert('‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!');
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    } catch (error) {
        console.error('Error announcing winners:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
function exportParticipants(tournamentId) {
    const participantCards = document.querySelectorAll('.participant-card');
    let exportText = `üìã –°–ü–ò–°–û–ö –£–ß–ê–°–¢–ù–ò–ö–û–í –¢–£–†–ù–ò–†–ê\n\n`;

    participantCards.forEach((card, index) => {
        const name = card.querySelector('.participant-name').textContent;
        const details = Array.from(card.querySelectorAll('.participant-details span')).map(span => span.textContent).join(' | ');
        exportText += `${index + 1}. ${name}\n   ${details}\n\n`;
    });

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    if (navigator.clipboard) {
        navigator.clipboard.writeText(exportText).then(() => {
            alert('‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }).catch(() => {
            alert(exportText);
        });
    } else {
        alert(exportText);
    }
}

// Toggle tournament registration status
async function toggleTournamentRegistration(tournamentId, newStatus) {
    try {
        const response = await fetch(`/api/tournaments/${tournamentId}/toggle-registration`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: newStatus })
        });

        if (response.ok) {
            const statusText = newStatus === 'open' ? '–æ—Ç–∫—Ä—ã—Ç–∞' : '–∑–∞–∫—Ä—ã—Ç–∞';
            alert(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä ${statusText}!`);
            loadTournaments();
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        }
    } catch (error) {
        console.error('Error toggling registration:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
}

// Delete tournament
async function deleteTournament(tournamentId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) return;

    try {
        const response = await fetch(`/api/tournaments/${tournamentId}`, {
            method: 'DELETE'
        });

        const result = await response.json();
        if (result.success) {
            alert('‚úÖ –¢—É—Ä–Ω–∏—Ä —É–¥–∞–ª–µ–Ω!');
            loadTournaments();
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞: ' + (result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä'));
        }
    } catch (error) {
        console.error('Error deleting tournament:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞');
    }
}

// Update prize places based on winners count
function updatePrizePlaces(type) {
    const winnersInput = document.getElementById(`${type}-winners`);
    const prizesContainer = document.getElementById(`${type}-prizes`);
    const count = parseInt(winnersInput.value) || 1;

    const medals = ['ü•á', 'ü•à', 'ü•â'];
    const places = ['1 –º–µ—Å—Ç–æ', '2 –º–µ—Å—Ç–æ', '3 –º–µ—Å—Ç–æ'];

    let html = '';
    for (let i = 1; i <= Math.min(count, 10); i++) {
        const medal = i <= 3 ? medals[i-1] : 'üèÜ';
        const place = i <= 3 ? places[i-1] : `${i} –º–µ—Å—Ç–æ`;
        const prefix = type === 'tournament' ? 'tournament-' : '';

        html += `
            <div class="form-group">
                <label>${medal} –ü—Ä–∏–∑ –∑–∞ ${place}</label>
                <input type="text" id="${prefix}prize-${i}" placeholder="–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –∑–∞ ${place}" />
            </div>
        `;
    }

    prizesContainer.innerHTML = html;
}

// Show tournament participants selector
async function showTournamentParticipantsSelector() {
    try {
        const response = await fetch('/api/tournaments');
        const tournaments = await response.json();

        if (!Array.isArray(tournaments) || tournaments.length === 0) {
            document.getElementById('admin-content').innerHTML = `
                <div class="admin-stats">
                    <div class="stats-header">
                        <h2>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤</h2>
                        <button onclick="showAdminPanel()" class="back-btn">‚Üê –ù–∞–∑–∞–¥</button>
                    </div>
                    <div class="empty-state">
                        üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
                    </div>
                </div>
            `;
            return;
        }

        const tournamentsList = tournaments.map(tournament => `
            <div class="tournament-selector-card" onclick="viewTournamentParticipants(${tournament.id})">
                <div class="tournament-selector-info">
                    <h3>${tournament.title}</h3>
                    <p>${tournament.description}</p>
                    <div class="tournament-selector-stats">
                        <span>üë• ${tournament.participants || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                        <span>üìÖ ${tournament.start_date ? new Date(tournament.start_date).toLocaleDateString('ru-RU') : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                    </div>
                </div>
                <div class="tournament-selector-arrow">‚ñ∂</div>
            </div>
        `).join('');

        document.getElementById('admin-content').innerHTML = `
            <div class="admin-stats">
                <div class="stats-header">
                    <h2>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤</h2>
                    <button onclick="showAdminPanel()" class="back-btn">‚Üê –ù–∞–∑–∞–¥</button>
                </div>
                <div class="tournament-selector-subtitle">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:
                </div>
                <div class="tournament-selector-list">
                    ${tournamentsList}
                </div>
            </div>
        `;

    } catch (error) {
        console.error('Error loading tournaments for participants view:', error);
        document.getElementById('admin-content').innerHTML = `
            <div class="admin-stats">
                <div class="stats-header">
                    <h2>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤</h2>
                    <button onclick="showAdminPanel()" class="back-btn">‚Üê –ù–∞–∑–∞–¥</button>
                </div>
                <div class="error-message">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤</div>
            </div>
        `;
    }
}

// Load admin stats
async function loadAdminStats() {
    try {
        const response = await fetch('/api/stats');

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const stats = await response.json();

        document.getElementById('admin-content').innerHTML = `
            <div class="admin-stats">
                <div class="stats-header">
                    <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞</h2>
                    <button onclick="showAdminPanel()" class="back-btn">‚Üê –ù–∞–∑–∞–¥</button>
                </div>
                <div class="compact-stats-grid">
                    <div class="compact-stat-card">
                        <div class="stat-icon">üë•</div>
                        <div class="stat-info">
                            <div class="stat-number">${stats.total_users || 0}</div>
                            <div class="stat-label">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                        </div>
                    </div>
                    <div class="compact-stat-card">
                        <div class="stat-icon">‚úÖ</div>
                        <div class="stat-info">
                            <div class="stat-number">${stats.active_users || 0}</div>
                            <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                        </div>
                    </div>
                    <div class="compact-stat-card">
                        <div class="stat-icon">üéÅ</div>
                        <div class="stat-info">
                            <div class="stat-number">${stats.total_giveaways || 0}</div>
                            <div class="stat-label">–í—Å–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π</div>
                        </div>
                    </div>
                    <div class="compact-stat-card">
                        <div class="stat-icon">üèÜ</div>
                        <div class="stat-info">
                            <div class="stat-number">${stats.total_tournaments || 0}</div>
                            <div class="stat-label">–í—Å–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤</div>
                        </div>
                    </div>
                </div>
            </div>
        `;

    } catch (error) {
        console.error('Error loading admin stats:', error);
        document.getElementById('admin-content').innerHTML = `
            <div class="admin-stats">
                <div class="stats-header">
                    <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                    <button onclick="showAdminPanel()" class="back-btn">‚Üê –ù–∞–∑–∞–¥</button>
                </div>
                <div class="error-message">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>
            </div>
        `;
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', initializeApp);

// Window load event
window.addEventListener('load', function() {
    console.log('‚úÖ Page loaded, initializing...');
    initializeApp();
});

console.log('üöÄ Script.js loaded successfully');